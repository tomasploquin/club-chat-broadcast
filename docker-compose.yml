version: '3.8'

services:
  # Backend Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: club-chat-backend
    restart: unless-stopped
    ports:
      - "5001:5001"
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=${FLASK_ENV:-production}
      - PYTHONPATH=/app
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost:5173}
      - GO_BRIDGE_BASE_URL=http://whatsapp-bridge:8082
      - WHATSAPP_BRIDGE_URL=http://whatsapp-bridge:8082
    volumes:
      - backend_uploads:/app/uploads
      - ./:/app:delegated  # For development
    depends_on:
      whatsapp-bridge:
        condition: service_healthy
    networks:
      - club-chat-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Development Service
  frontend-dev:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: development
    container_name: club-chat-frontend-dev
    restart: unless-stopped
    profiles: ["dev"]
    ports:
      - "5173:5173"
    environment:
      - VITE_API_BASE_URL=http://localhost:5001
      - VITE_BRIDGE_URL=http://localhost:8082
    volumes:
      - ./src:/app/src:delegated
      - ./public:/app/public:delegated
      - ./index.html:/app/index.html:delegated
      - ./vite.config.ts:/app/vite.config.ts:delegated
      - ./tailwind.config.ts:/app/tailwind.config.ts:delegated
      - ./tsconfig.json:/app/tsconfig.json:delegated
      - ./tsconfig.app.json:/app/tsconfig.app.json:delegated
      - ./tsconfig.node.json:/app/tsconfig.node.json:delegated
    depends_on:
      - backend
    networks:
      - club-chat-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend Production Service
  frontend-prod:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: production
    container_name: club-chat-frontend-prod
    restart: unless-stopped
    profiles: ["prod"]
    ports:
      - "3000:80"
    environment:
      - VITE_API_URL_PROD=http://localhost:8080/api
      - VITE_BRIDGE_URL_PROD=http://localhost:8080/bridge
    depends_on:
      - backend
    networks:
      - club-chat-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # WhatsApp Bridge Service
  whatsapp-bridge:
    build:
      context: ./MCP/whatsapp-bridge
      dockerfile: Dockerfile
    container_name: club-chat-whatsapp-bridge
    restart: unless-stopped
    ports:
      - "8082:8082"
    environment:
      - BRIDGE_PORT=8082
      - SESSION_PATH=/app/session
    volumes:
      - whatsapp_session:/app/session
    networks:
      - club-chat-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8082/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: club-chat-nginx
    restart: unless-stopped
    profiles: ["prod"]
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      backend:
        condition: service_healthy
      whatsapp-bridge:
        condition: service_healthy
      frontend-prod:
        condition: service_healthy
    networks:
      - club-chat-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# Networks
networks:
  club-chat-network:
    driver: bridge
    name: club-chat-network

# Volumes
volumes:
  whatsapp_session:
    name: club-chat-whatsapp-session
    driver: local
  backend_uploads:
    name: club-chat-backend-uploads
    driver: local
  nginx_logs:
    name: club-chat-nginx-logs
    driver: local 